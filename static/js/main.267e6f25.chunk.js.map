{"version":3,"sources":["components/DashboardNavigation/index.js","components/DashboardNavigation/DashboardNavigation.js","components/Navigation/index.js","components/Navigation/Navigation.js","components/SignUpProgress/index.js","components/SignUpProgress/SignUpProgress.js","components/SignUpLogIn/index.js","components/SignUpLogIn/SignUpLogin.js","components/SignUpJob/index.js","components/SignUpJob/SignUpJob.js","components/SignUpSuccess/index.js","components/SignUpSuccess/SignUpSuccess.js","components/SignUpAuth/index.js","components/SignUpAuth/SignUpAuth.js","components/SignUpModal/SignUpModal.js","components/SignUpModal/index.js","components/LoggedOutDashboard/index.js","components/LoggedOutDashboard/LoggedOutDashboard.js","components/Dashboard/Dashboard.js","serviceWorker.js","index.js"],"names":["DashboardNavigation","width","className","React","PureComponent","GlobalNavigation","props","state","isProfileDropdownOpen","toggleDropdown","bind","classnames","btn","dropdown","this","setState","prevState","alt","isLoggedIn","dropdownClasses","onClick","name","updateIsLoggedIn","handleOpenSignUpModal","Component","SignUpProgress","stage","completedStages","includes","currentStage","getStageClassName","Stages","LOG_IN","setCurrentStage","JOB","AUTH","SUCCESS","SignUpLogin","isUsernameFocused","isPasswordFocused","isConfirmPasswordFocused","getUsernameClassnames","onBlur","onFocus","htmlFor","type","id","getPasswordClassnames","getConfirmPasswordClassnames","SignUpJob","isEmailFocused","isCompanyFocused","isNameFocused","e","updateName","target","value","getNameClassnames","onBlurName","getEmailClassnames","getCompanyClassnames","class","placeholder","SignUpSuccess","SignUpAuth","SignUpModal","completeStage","goToPreviousStage","onSubmit","isSignUpModalOpen","addCompletedStage","values","Object","nextIndex","indexOf","nextItem","prevIndex","prevItem","onClose","getModalClassnames","getInputForm","getBackButtonClassnames","disabled","getMaskClassnames","LoggedOutDashboard","Dashboard","handleCloseSignUpModal","document","body","classList","add","remove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.267e6f25.chunk.js","sourcesContent":["import DashboardNavigation from \"./DashboardNavigation.js\";\n\nexport default DashboardNavigation;\n","import React from \"react\";\nimport \"./DashboardNavigation.css\";\nimport Column from \"@sendgrid/ui-components/grid/column\";\n\nexport default class DashboardNavigation extends React.PureComponent {\n  render() {\n    return (\n      <Column width={3}>\n        <div className=\"DashboardNavigation-container\">\n          <div className=\"DashboardNavigation-item\">Dashboard</div>\n        </div>\n      </Column>\n    );\n  }\n}\n","import GlobalNavigation from \"./Navigation.js\";\n\nexport default GlobalNavigation;\n","import React from \"react\";\nimport \"./Navigation.css\";\nimport classnames from \"classnames\";\n\nexport default class Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isProfileDropdownOpen: false };\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n  }\n\n  dropdownClasses() {\n    return classnames({\n      btn: true,\n      \"btn-tertiary\": true,\n      \"btn-dropdown\": true,\n      \"has-icon\": true,\n      dropdown: true,\n      \"is-active\": this.state.isProfileDropdownOpen,\n    });\n  }\n\n  toggleDropdown() {\n    this.setState((prevState) => ({\n      isProfileDropdownOpen: !prevState.isProfileDropdownOpen,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"Navigation\">\n        <div className=\"Navigation-logo\" alt=\"logo\" />\n        <div className=\"Navigation-items\">\n          <span className=\"Navigation-item\">\n            Products\n            <i className=\"sg-icon sg-icon-caret\" />\n          </span>\n          <span className=\"Navigation-item\">\n            Docs\n            <i className=\"sg-icon sg-icon-caret\" />\n          </span>\n          <span className=\"Navigation-item\">\n            About\n            <i className=\"sg-icon\" />\n          </span>\n          <span className=\"Navigation-item\">\n            Careers\n            <i className=\"sg-icon\" />\n          </span>\n        </div>\n        {this.props.isLoggedIn ? (\n          <div className={this.dropdownClasses()} onClick={this.toggleDropdown}>\n            <i className=\"sg-icon sg-icon-teammate\" />\n            {this.props.name}\n            <ul className=\"dropdown-menu\">\n              <li>\n                <a className=\"dropdown-link\">Dashboard</a>\n              </li>\n              <li>\n                <a className=\"dropdown-link\">Settings</a>\n              </li>\n              <li>\n                <a\n                  className=\"dropdown-link\"\n                  onClick={() => this.props.updateIsLoggedIn(false)}\n                >\n                  Log out\n                </a>\n              </li>\n            </ul>\n          </div>\n        ) : (\n          <div className=\"btn-list\">\n            <button className=\"btn btn-secondary\">Log in</button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={this.props.handleOpenSignUpModal}\n            >\n              Sign up\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import SignUpProgress from \"./SignUpProgress.js\";\n\nexport default SignUpProgress;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./SignUpProgress.css\";\nimport { Stages } from \"../SignUpModal/SignUpModal.js\";\n\nexport default class SignUpProgress extends React.PureComponent {\n  getStageClassName(stage) {\n    return classnames({\n      \"is-done\":\n        this.props.completedStages.includes(stage) &&\n        this.props.currentStage !== stage,\n      \"is-selected\": this.props.currentStage === stage,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SignUpProgress progress-container\">\n        <ul className=\"progress-stages\">\n          <li className={this.getStageClassName(Stages.LOG_IN)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.LOG_IN)}>\n              Log in credentials\n            </label>\n          </li>\n          <li className={this.getStageClassName(Stages.JOB)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.JOB)}>\n              Job\n            </label>\n          </li>\n          <li className={this.getStageClassName(Stages.AUTH)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.AUTH)}>\n              Auth\n            </label>\n          </li>\n          <li className={this.getStageClassName(Stages.SUCCESS)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.SUCCESS)}>\n              Success!\n            </label>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import SignUpLogin from \"./SignUpLogin.js\";\n\nexport default SignUpLogin;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport default class SignUpLogin extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isUsernameFocused: false,\n      isPasswordFocused: false,\n      isConfirmPasswordFocused: false,\n    };\n  }\n\n  getUsernameClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isUsernameFocused,\n    });\n  }\n\n  getPasswordClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isPasswordFocused,\n    });\n  }\n\n  getConfirmPasswordClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isConfirmPasswordFocused,\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          className={this.getUsernameClassnames()}\n          onBlur={() => this.setState({ isUsernameFocused: false })}\n          onFocus={() => this.setState({ isUsernameFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"username\">\n            Username\n          </label>\n          <input type=\"text\" id=\"username\" />\n          <span className=\"input-info\">\n            Choose a unique username or use your email.\n          </span>\n        </div>\n        <div\n          className={this.getPasswordClassnames()}\n          onBlur={() => this.setState({ isPasswordFocused: false })}\n          onFocus={() => this.setState({ isPasswordFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"password\">\n            Password\n          </label>\n          <input type=\"password\" id=\"password\" />\n          <span className=\"input-info\">\n            Passwords should be 8 or more characters.\n          </span>\n        </div>\n        <div\n          className={this.getConfirmPasswordClassnames()}\n          onBlur={() => this.setState({ isConfirmPasswordFocused: false })}\n          onFocus={() => this.setState({ isConfirmPasswordFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"confirm_password\">\n            Confirm password\n          </label>\n          <input type=\"password\" id=\"confirm_password\" />\n          <span className=\"input-info\">Passwords must match.</span>\n        </div>\n      </>\n    );\n  }\n}\n","import SignUpJob from \"./SignUpJob.js\";\n\nexport default SignUpJob;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport default class SignUpJob extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEmailFocused: false,\n      isCompanyFocused: false,\n      isNameFocused: false,\n    };\n  }\n\n  getEmailClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isEmailFocused,\n    });\n  }\n\n  getCompanyClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-focused\": this.state.isCompanyFocused,\n    });\n  }\n\n  getNameClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isNameFocused,\n    });\n  }\n\n  onBlurName(e) {\n    this.setState({ isNameFocused: false });\n    this.props.updateName(e.target.value);\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          className={this.getNameClassnames()}\n          onBlur={(e) => this.onBlurName(e)}\n          onFocus={() => this.setState({ isNameFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"name\">\n            Name\n          </label>\n          <input type=\"text\" id=\"name\" />\n        </div>\n        <div\n          className={this.getEmailClassnames()}\n          onBlur={() => this.setState({ isEmailFocused: false })}\n          onFocus={() => this.setState({ isEmailFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"email\">\n            Email\n          </label>\n          <input type=\"text\" id=\"email\" />\n        </div>\n        <div\n          className={this.getCompanyClassnames()}\n          onBlur={() => this.setState({ isCompanyFocused: false })}\n          onFocus={() => this.setState({ isCompanyFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"company\">\n            Company\n          </label>\n          <input type=\"text\" id=\"company\" />\n        </div>\n        <div className=\"input-select-wrap\">\n          <label className=\"input-select-label\" htmlFor=\"role\">\n            Role\n          </label>\n          <div class=\"input-select\">\n            <select id=\"role\" placeholder=\"Select a role\">\n              <option></option>\n              <option value=\"Developer\">Developer</option>\n              <option value=\"CEO\">CEO</option>\n              <option value=\"Marketer\">Marketer</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import SignUpSuccess from \"./SignUpSuccess.js\";\n\nexport default SignUpSuccess;\n","import React from \"react\";\nimport \"./SignUpSuccess.css\";\n\nexport default class SignUpSuccess extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"SignUpSuccess\">\n        <h2>Success!</h2>\n        <i className=\"sg-icon sg-icon-status-positive is-size-60\"></i>\n        <p className=\"SignUpSuccess-description\">\n          Click submit to create your account or use the Back button to review\n          your info.\n        </p>\n      </div>\n    );\n  }\n}\n","import SignUpAuth from \"./SignUpAuth.js\";\n\nexport default SignUpAuth;\n","import React from \"react\";\nimport \"./SignUpAuth.css\";\n\nexport default class SignUpAuth extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"SignUpAuth\">\n        <div className=\"input-select-wrap is-required\">\n          <label className=\"input-select-label\" htmlFor=\"project-status\">\n            What best describes your current authentication solution?\n          </label>\n          <div class=\"input-select\">\n            <select id=\"project-status\">\n              <option></option>\n              <option value=\"New\">I need to build one.</option>\n              <option value=\"WIP\">\n                I've built an existing flow I'm looking to upgrade.\n              </option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"input-select-wrap\">\n          <label\n            className=\"input-select-label is-required\"\n            htmlFor=\"interaction\"\n          >\n            How can users interact with your application?\n          </label>\n          <div class=\"input-select\">\n            <select id=\"interaction\">\n              <option></option>\n              <option value=\"Mobile\">Mobile application only</option>\n              <option value=\"Web\">Website only</option>\n              <option value=\"Both\">Marketer</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"input-select-wrap is-required\">\n          <label className=\"input-select-label\" htmlFor=\"data\">\n            What type of user data does your application contain?\n          </label>\n          <div class=\"input-select\">\n            <select id=\"data\">\n              <option></option>\n              <option value=\"Basic\">Basic profile data</option>\n              <option value=\"Health\">Personal health data</option>\n              <option value=\"Finance\">Financial data</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./SignUpModal.css\";\nimport SignUpProgress from \"../SignUpProgress\";\nimport SignUpLogin from \"../SignUpLogIn\";\nimport SignUpJob from \"../SignUpJob\";\nimport SignUpSuccess from \"../SignUpSuccess\";\nimport SignUpAuth from \"../SignUpAuth\";\n\nexport const Stages = {\n  LOG_IN: \"log-in\",\n  JOB: \"JOB\",\n  AUTH: \"auth\",\n  SUCCESS: \"success\",\n};\n\nexport default class SignUpModal extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { currentStage: Stages.LOG_IN, completedStages: [] };\n    this.setCurrentStage = this.setCurrentStage.bind(this);\n    this.completeStage = this.completeStage.bind(this);\n    this.goToPreviousStage = this.goToPreviousStage.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  getMaskClassnames() {\n    return classnames({\n      \"modal-mask\": true,\n      \"is-visible\": this.props.isSignUpModalOpen,\n    });\n  }\n  getModalClassnames() {\n    return classnames({\n      \"center-modal\": true,\n      \"is-visible\": this.props.isSignUpModalOpen,\n    });\n  }\n\n  setCurrentStage(currentStage) {\n    this.setState({ currentStage });\n  }\n\n  addCompletedStage() {\n    this.setState((prevState) => ({\n      completedStages: [...prevState.completedStages, prevState.currentStage],\n    }));\n  }\n\n  completeStage() {\n    this.addCompletedStage();\n    let values = Object.values(Stages);\n    let nextIndex = values.indexOf(this.state.currentStage) + 1;\n    let nextItem = values[nextIndex];\n    this.setCurrentStage(nextItem);\n  }\n\n  goToPreviousStage() {\n    let values = Object.values(Stages);\n    let prevIndex = values.indexOf(this.state.currentStage) - 1;\n    let prevItem = values[prevIndex];\n    this.setCurrentStage(prevItem);\n  }\n\n  getInputForm() {\n    switch (this.state.currentStage) {\n      case Stages.LOG_IN:\n      default:\n        return <SignUpLogin />;\n      case Stages.JOB:\n        return <SignUpJob updateName={this.props.updateName} />;\n      case Stages.AUTH:\n        return <SignUpAuth />;\n      case Stages.SUCCESS:\n        return <SignUpSuccess />;\n    }\n  }\n\n  getBackButtonClassnames() {\n    return classnames({\n      btn: true,\n      \"btn-secondary\": true,\n      \"is-disabled\": this.state.currentStage === Stages.LOG_IN,\n    });\n  }\n\n  onSubmit() {\n    this.props.updateIsLoggedIn(true);\n    this.props.onClose();\n  }\n\n  render() {\n    return (\n      <>\n        <div className={this.getModalClassnames()}>\n          <i className=\"sg-icon sg-icon-x\" onClick={this.props.onClose}></i>\n          <h2>Create your account</h2>\n          <SignUpProgress\n            currentStage={this.state.currentStage}\n            setCurrentStage={this.setCurrentStage}\n            completedStages={this.state.completedStages}\n          />\n          <div className=\"SignUpModal-form\">{this.getInputForm()}</div>\n          <div className=\"conf-alert-actions\">\n            <div className=\"btn-list\">\n              <button\n                className={this.getBackButtonClassnames()}\n                disabled={this.state.currentStage === Stages.LOG_IN}\n                onClick={this.goToPreviousStage}\n              >\n                Back\n              </button>\n              {this.state.currentStage === Stages.SUCCESS ? (\n                <button className=\"btn btn-primary\" onClick={this.onSubmit}>\n                  Submit\n                </button>\n              ) : (\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={this.completeStage}\n                >\n                  Next\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n        <div\n          className={this.getMaskClassnames()}\n          onClick={this.props.onClose}\n        ></div>\n      </>\n    );\n  }\n}\n","import SignUpModal from \"./SignUpModal.js\";\n\nexport default SignUpModal;\n","import LoggedOutDashboard from \"./LoggedOutDashboard.js\";\n\nexport default LoggedOutDashboard;\n","import React from \"react\";\nimport \"./LoggedOutDashboard.css\";\n\nexport default class LoggedOutDashboard extends React.PureComponent {\n  render() {\n    return <div className=\"LoggedOutDashboard\"></div>;\n  }\n}\n","import React from \"react\";\nimport Row from \"@sendgrid/ui-components/grid/row\";\nimport DashboardNavigation from \"../DashboardNavigation\";\nimport Navigation from \"../Navigation\";\nimport SignUpModal from \"../SignUpModal\";\nimport LoggedOutDashboard from \"../LoggedOutDashboard\";\n\nexport default class Dashboard extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\", isLoggedIn: false, isSignUpModalOpen: false };\n    this.handleOpenSignUpModal = this.handleOpenSignUpModal.bind(this);\n    this.handleCloseSignUpModal = this.handleCloseSignUpModal.bind(this);\n    this.updateIsLoggedIn = this.updateIsLoggedIn.bind(this);\n    this.updateName = this.updateName.bind(this);\n  }\n\n  handleOpenSignUpModal() {\n    document.body.classList.add(\"modal-open\");\n    this.setState({\n      isSignUpModalOpen: true,\n    });\n  }\n\n  handleCloseSignUpModal() {\n    document.body.classList.remove(\"modal-open\");\n    this.setState({\n      isSignUpModalOpen: false,\n    });\n  }\n\n  updateIsLoggedIn(isLoggedIn) {\n    this.setState({\n      isLoggedIn,\n    });\n  }\n\n  updateName(name) {\n    this.setState({\n      name,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Navigation\n          isLoggedIn={this.state.isLoggedIn}\n          name={this.state.name}\n          handleOpenSignUpModal={this.handleOpenSignUpModal}\n          updateIsLoggedIn={this.updateIsLoggedIn}\n        />\n        {this.state.isLoggedIn ? (\n          <Row>\n            <DashboardNavigation />\n          </Row>\n        ) : (\n          <LoggedOutDashboard />\n        )}\n        <SignUpModal\n          isSignUpModalOpen={this.state.isSignUpModalOpen}\n          onClose={this.handleCloseSignUpModal}\n          updateIsLoggedIn={this.updateIsLoggedIn}\n          updateName={this.updateName}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}