{"version":3,"sources":["components/DashboardNavigation/index.js","components/DashboardNavigation/DashboardNavigation.js","components/Navigation/index.js","components/Navigation/Navigation.js","components/Dashboard/Dashboard.js","serviceWorker.js","index.js"],"names":["DashboardNavigation","width","className","PureComponent","GlobalNavigation","props","state","isProfileDropdownOpen","toggleDropdown","bind","classnames","btn","dropdown","this","setState","prevState","alt","name","dropdownClasses","onClick","class","React","Component","Dashboard","email","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAEeA,E,uKCIX,OACE,kBAAC,IAAD,CAAQC,MAAO,GACb,yBAAKC,UAAU,iCACb,yBAAKA,UAAU,4BAAf,mB,GALuCC,iB,gCCFlCC,E,kDCGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,uBAAuB,GACtC,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAHL,E,8DAOjB,OAAOC,IAAW,CAChBC,KAAK,EACL,gBAAgB,EAChB,gBAAgB,EAChB,YAAY,EACZC,UAAU,EACV,YAAaC,KAAKP,MAAMC,0B,uCAK1BM,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BR,uBAAwBQ,EAAUR,4B,+BAKpC,OACE,yBAAKL,UAAU,cACb,yBAAKA,UAAU,kBAAkBc,IAAI,SACrC,yBAAKd,UAAU,oBACb,0BAAMA,UAAU,mBAAhB,WAEE,uBAAGA,UAAU,2BAEf,0BAAMA,UAAU,mBAAhB,OAEE,uBAAGA,UAAU,2BAEf,0BAAMA,UAAU,mBAAhB,QAEE,uBAAGA,UAAU,aAEf,0BAAMA,UAAU,mBAAhB,UAEE,uBAAGA,UAAU,cAGhBW,KAAKR,MAAMY,KACV,yBAAKf,UAAWW,KAAKK,kBAAmBC,QAASN,KAAKL,gBACpD,uBAAGN,UAAU,6BACZW,KAAKR,MAAMY,KACZ,wBAAIf,UAAU,iBACZ,4BACE,uBAAGkB,MAAM,iBAAT,cAEF,4BACE,uBAAGA,MAAM,iBAAT,aAEF,4BACE,uBAAGA,MAAM,iBAAT,cAKN,yBAAKlB,UAAU,kCACb,4BAAQA,UAAU,qBAAlB,UACA,4BAAQA,UAAU,mBAAlB,iB,GAjE4BmB,IAAMC,WCCzBC,E,kDACnB,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEW,KAAM,GAAIO,MAAO,IAFf,E,qDAMjB,OACE,yBAAKtB,UAAU,aACb,kBAAC,EAAD,CAAYe,KAAMJ,KAAKP,MAAMW,OAC7B,kBAAC,IAAD,KACE,kBAAC,EAAD,Y,GAX6BI,IAAMlB,eCOzBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f89e77d.chunk.js","sourcesContent":["import DashboardNavigation from \"./DashboardNavigation.js\";\n\nexport default DashboardNavigation;\n","import React, { PureComponent } from \"react\";\nimport \"./DashboardNavigation.css\";\nimport Column from \"@sendgrid/ui-components/grid/column\";\n\nexport default class DashboardNavigation extends PureComponent {\n  render() {\n    return (\n      <Column width={3}>\n        <div className=\"DashboardNavigation-container\">\n          <div className=\"DashboardNavigation-item\">Dashboard</div>\n        </div>\n      </Column>\n    );\n  }\n}\n","import GlobalNavigation from \"./Navigation.js\";\n\nexport default GlobalNavigation;\n","import React from \"react\";\nimport \"./Navigation.css\";\nimport classnames from \"classnames\";\n\nexport default class Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isProfileDropdownOpen: false };\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n  }\n\n  dropdownClasses() {\n    return classnames({\n      btn: true,\n      \"btn-tertiary\": true,\n      \"btn-dropdown\": true,\n      \"has-icon\": true,\n      dropdown: true,\n      \"is-active\": this.state.isProfileDropdownOpen,\n    });\n  }\n\n  toggleDropdown() {\n    this.setState((prevState) => ({\n      isProfileDropdownOpen: !prevState.isProfileDropdownOpen,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"Navigation\">\n        <div className=\"Navigation-logo\" alt=\"logo\" />\n        <div className=\"Navigation-items\">\n          <span className=\"Navigation-item\">\n            Products\n            <i className=\"sg-icon sg-icon-caret\" />\n          </span>\n          <span className=\"Navigation-item\">\n            Docs\n            <i className=\"sg-icon sg-icon-caret\" />\n          </span>\n          <span className=\"Navigation-item\">\n            About\n            <i className=\"sg-icon\" />\n          </span>\n          <span className=\"Navigation-item\">\n            Careers\n            <i className=\"sg-icon\" />\n          </span>\n        </div>\n        {this.props.name ? (\n          <div className={this.dropdownClasses()} onClick={this.toggleDropdown}>\n            <i className=\"sg-icon sg-icon-teammate\" />\n            {this.props.name}\n            <ul className=\"dropdown-menu\">\n              <li>\n                <a class=\"dropdown-link\">Dashboard</a>\n              </li>\n              <li>\n                <a class=\"dropdown-link\">Settings</a>\n              </li>\n              <li>\n                <a class=\"dropdown-link\">Log out</a>\n              </li>\n            </ul>\n          </div>\n        ) : (\n          <div className=\"Navigation-buttonList btn-list\">\n            <button className=\"btn btn-secondary\">Log in</button>\n            <button className=\"btn btn-primary\">Sign up</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Row from \"@sendgrid/ui-components/grid/row\";\nimport DashboardNavigation from \"../DashboardNavigation\";\nimport Navigation from \"../Navigation\";\n\nexport default class Dashboard extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\", email: \"\" };\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Navigation name={this.state.name} />\n        <Row>\n          <DashboardNavigation />\n        </Row>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}