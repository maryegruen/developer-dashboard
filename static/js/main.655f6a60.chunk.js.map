{"version":3,"sources":["components/DashboardNavigation/index.js","components/DashboardNavigation/DashboardNavigation.js","components/Navigation/index.js","components/Navigation/Navigation.js","components/SignUpProgress/index.js","components/SignUpProgress/SignUpProgress.js","components/SignUpLogIn/index.js","components/SignUpLogIn/SignUpLogin.js","components/SignUpJob/index.js","components/SignUpJob/SignUpJob.js","components/SignUpSuccess/index.js","components/SignUpSuccess/SignUpSuccess.js","components/SignUpAuth/index.js","components/SignUpAuth/SignUpAuth.js","components/SignUpModal/SignUpModal.js","components/SignUpModal/index.js","components/LoggedOutDashboard/index.js","components/LoggedOutDashboard/LoggedOutDashboard.js","components/DashboardTab/index.js","components/DashboardTab/DashboardTab.js","components/SingleFactorGuide/index.js","components/SingleFactorGuide/SingleFactorGuide.js","components/MultiFactorGuide/index.js","components/MultiFactorGuide/MultiFactorGuide.js","components/Reports/index.js","components/Reports/Reports.js","components/Settings/index.js","components/Settings/Settings.js","components/DashboardContent/index.js","components/DashboardContent/DashboardContent.js","components/Dashboard/Dashboard.js","serviceWorker.js","index.js"],"names":["DashboardNavigation","classnames","this","props","isSetUpGroupOpen","item","small","activeItem","className","getItemClassnames","DASHBOARD_NAV_ITEMS","DASHBOARD","onClick","updateActiveItem","getSetUpClassnames","handleOpenSetUpGroup","SINGLE_FACTOR","MULTI_FACTOR","REPORTS","SETTINGS","React","PureComponent","Navigation","state","isProfileDropdownOpen","toggleDropdown","bind","btn","dropdown","setState","prevState","alt","isLoggedIn","dropdownClasses","name","updateIsLoggedIn","handleOpenSignUpModal","Component","SignUpProgress","stage","completedStages","includes","currentStage","getStageClassName","Stages","LOG_IN","setCurrentStage","JOB","AUTH","SUCCESS","SignUpLogin","isUsernameFocused","isPasswordFocused","isConfirmPasswordFocused","getUsernameClassnames","onBlur","onFocus","htmlFor","type","id","getPasswordClassnames","getConfirmPasswordClassnames","SignUpJob","isEmailFocused","isCompanyFocused","isNameFocused","e","updateName","target","value","getNameClassnames","onBlurName","getEmailClassnames","getCompanyClassnames","placeholder","SignUpSuccess","SignUpAuth","SignUpModal","completeStage","goToPreviousStage","onSubmit","isSignUpModalOpen","addCompletedStage","values","Object","nextIndex","indexOf","nextItem","prevIndex","prevItem","onClose","getModalClassnames","getInputForm","getBackButtonClassnames","disabled","getMaskClassnames","LoggedOutDashboard","DashboardTab","shouldShowUpsell","clientId","clientIdTooltip","secretKeyTooltip","secretKey","onClickCopyClientId","onClickGetStarted","onCloseUpsell","onMouseEnter","onClickCopySecretKey","navigator","clipboard","writeText","split","getFirstName","data-tooltip","data-tooltip-pos","data-tooltip-length","SingleFactorGuide","MultiFactorGuide","Reports","Settings","DashboardContent","getContentComponent","Dashboard","handleCloseSignUpModal","document","body","classList","add","remove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.655f6a60.chunk.js","sourcesContent":["import DashboardNavigation from \"./DashboardNavigation.js\";\n\nexport default DashboardNavigation;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./DashboardNavigation.css\";\nimport { DASHBOARD_NAV_ITEMS } from \"../Dashboard/Dashboard\";\n\nexport default class DashboardNavigation extends React.PureComponent {\n  getSetUpClassnames() {\n    return classnames({\n      \"accordion-panel\": true,\n      \"is-visible\": this.props.isSetUpGroupOpen,\n    });\n  }\n\n  getItemClassnames(item) {\n    return classnames({\n      \"DashboardNavigation-item\": true,\n      small: true,\n      \"is-active\": this.props.activeItem === item,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"DashboardNavigation\">\n        <div\n          className={this.getItemClassnames(DASHBOARD_NAV_ITEMS.DASHBOARD)}\n          onClick={() =>\n            this.props.updateActiveItem(DASHBOARD_NAV_ITEMS.DASHBOARD)\n          }\n        >\n          Dashboard\n        </div>\n        <div className=\"DashboardNavigation-accordionItem accordion-wrapper\">\n          <div className={this.getSetUpClassnames()}>\n            <div\n              className=\"accordion-title small\"\n              onClick={this.props.handleOpenSetUpGroup}\n            >\n              Set up guides\n            </div>\n            <div className=\"accordion-content\">\n              <ul>\n                <li>\n                  <div\n                    className={this.getItemClassnames(\n                      DASHBOARD_NAV_ITEMS.SINGLE_FACTOR\n                    )}\n                    onClick={() =>\n                      this.props.updateActiveItem(\n                        DASHBOARD_NAV_ITEMS.SINGLE_FACTOR\n                      )\n                    }\n                  >\n                    Single factor guide\n                  </div>\n                </li>\n                <li>\n                  <div\n                    className={this.getItemClassnames(\n                      DASHBOARD_NAV_ITEMS.MULTI_FACTOR\n                    )}\n                    onClick={() =>\n                      this.props.updateActiveItem(\n                        DASHBOARD_NAV_ITEMS.MULTI_FACTOR\n                      )\n                    }\n                  >\n                    Multi factor guide\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div\n          className={this.getItemClassnames(DASHBOARD_NAV_ITEMS.REPORTS)}\n          onClick={() =>\n            this.props.updateActiveItem(DASHBOARD_NAV_ITEMS.REPORTS)\n          }\n        >\n          Reports\n        </div>\n        <div\n          className={this.getItemClassnames(DASHBOARD_NAV_ITEMS.SETTINGS)}\n          onClick={() =>\n            this.props.updateActiveItem(DASHBOARD_NAV_ITEMS.SETTINGS)\n          }\n        >\n          Settings\n        </div>\n      </div>\n    );\n  }\n}\n","import Navigation from \"./Navigation.js\";\n\nexport default Navigation;\n","import React from \"react\";\nimport \"./Navigation.css\";\nimport classnames from \"classnames\";\n\nexport default class Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isProfileDropdownOpen: false };\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n  }\n\n  dropdownClasses() {\n    return classnames({\n      btn: true,\n      \"btn-tertiary\": true,\n      \"btn-dropdown\": true,\n      \"has-icon\": true,\n      dropdown: true,\n      \"is-active\": this.state.isProfileDropdownOpen,\n    });\n  }\n\n  toggleDropdown() {\n    this.setState((prevState) => ({\n      isProfileDropdownOpen: !prevState.isProfileDropdownOpen,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"Navigation\">\n        <div className=\"Navigation-logo\" alt=\"logo\" />\n        <div className=\"Navigation-items\">\n          <span className=\"Navigation-item small\">\n            Products\n            <i className=\"sg-icon sg-icon-caret\" />\n          </span>\n          <span className=\"Navigation-item small\">\n            Docs\n            <i className=\"sg-icon sg-icon-caret\" />\n          </span>\n          <span className=\"Navigation-item small\">\n            About\n            <i className=\"sg-icon\" />\n          </span>\n          <span className=\"Navigation-item small\">\n            Careers\n            <i className=\"sg-icon\" />\n          </span>\n        </div>\n        {this.props.isLoggedIn ? (\n          <div className={this.dropdownClasses()} onClick={this.toggleDropdown}>\n            <i className=\"sg-icon sg-icon-teammate\" />\n            {this.props.name}\n            <ul className=\"dropdown-menu\">\n              <li>\n                <a className=\"dropdown-link\">Dashboard</a>\n              </li>\n              <li>\n                <a className=\"dropdown-link\">Settings</a>\n              </li>\n              <li>\n                <a\n                  className=\"dropdown-link\"\n                  onClick={() => this.props.updateIsLoggedIn(false)}\n                >\n                  Log out\n                </a>\n              </li>\n            </ul>\n          </div>\n        ) : (\n          <div className=\"btn-list\">\n            <button className=\"btn btn-secondary\">Log in</button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={this.props.handleOpenSignUpModal}\n            >\n              Sign up\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import SignUpProgress from \"./SignUpProgress.js\";\n\nexport default SignUpProgress;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./SignUpProgress.css\";\nimport { Stages } from \"../SignUpModal/SignUpModal.js\";\n\nexport default class SignUpProgress extends React.PureComponent {\n  getStageClassName(stage) {\n    return classnames({\n      \"is-done\":\n        this.props.completedStages.includes(stage) &&\n        this.props.currentStage !== stage,\n      \"is-selected\": this.props.currentStage === stage,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SignUpProgress progress-container\">\n        <ul className=\"progress-stages\">\n          <li className={this.getStageClassName(Stages.LOG_IN)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.LOG_IN)}>\n              Log in credentials\n            </label>\n          </li>\n          <li className={this.getStageClassName(Stages.JOB)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.JOB)}>\n              Job\n            </label>\n          </li>\n          <li className={this.getStageClassName(Stages.AUTH)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.AUTH)}>\n              Auth\n            </label>\n          </li>\n          <li className={this.getStageClassName(Stages.SUCCESS)}>\n            <label onClick={() => this.props.setCurrentStage(Stages.SUCCESS)}>\n              Success!\n            </label>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import SignUpLogin from \"./SignUpLogin.js\";\n\nexport default SignUpLogin;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport default class SignUpLogin extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isUsernameFocused: false,\n      isPasswordFocused: false,\n      isConfirmPasswordFocused: false,\n    };\n  }\n\n  getUsernameClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isUsernameFocused,\n    });\n  }\n\n  getPasswordClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isPasswordFocused,\n    });\n  }\n\n  getConfirmPasswordClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isConfirmPasswordFocused,\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          className={this.getUsernameClassnames()}\n          onBlur={() => this.setState({ isUsernameFocused: false })}\n          onFocus={() => this.setState({ isUsernameFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"username\">\n            Username\n          </label>\n          <input type=\"text\" id=\"username\" />\n          <span className=\"input-info\">\n            Choose a unique username or use your email.\n          </span>\n        </div>\n        <div\n          className={this.getPasswordClassnames()}\n          onBlur={() => this.setState({ isPasswordFocused: false })}\n          onFocus={() => this.setState({ isPasswordFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"password\">\n            Password\n          </label>\n          <input type=\"password\" id=\"password\" />\n          <span className=\"input-info\">\n            Passwords should be 8 or more characters.\n          </span>\n        </div>\n        <div\n          className={this.getConfirmPasswordClassnames()}\n          onBlur={() => this.setState({ isConfirmPasswordFocused: false })}\n          onFocus={() => this.setState({ isConfirmPasswordFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"confirm_password\">\n            Confirm password\n          </label>\n          <input type=\"password\" id=\"confirm_password\" />\n          <span className=\"input-info\">Passwords must match.</span>\n        </div>\n      </>\n    );\n  }\n}\n","import SignUpJob from \"./SignUpJob.js\";\n\nexport default SignUpJob;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport default class SignUpJob extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEmailFocused: false,\n      isCompanyFocused: false,\n      isNameFocused: false,\n    };\n  }\n\n  getEmailClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isEmailFocused,\n    });\n  }\n\n  getCompanyClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-focused\": this.state.isCompanyFocused,\n    });\n  }\n\n  getNameClassnames() {\n    return classnames({\n      \"input-text-wrap\": true,\n      \"is-required\": true,\n      \"is-focused\": this.state.isNameFocused,\n    });\n  }\n\n  onBlurName(e) {\n    this.setState({ isNameFocused: false });\n    this.props.updateName(e.target.value);\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          className={this.getNameClassnames()}\n          onBlur={(e) => this.onBlurName(e)}\n          onFocus={() => this.setState({ isNameFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"name\">\n            Name\n          </label>\n          <input type=\"text\" id=\"name\" />\n        </div>\n        <div\n          className={this.getEmailClassnames()}\n          onBlur={() => this.setState({ isEmailFocused: false })}\n          onFocus={() => this.setState({ isEmailFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"email\">\n            Email\n          </label>\n          <input type=\"text\" id=\"email\" />\n        </div>\n        <div\n          className={this.getCompanyClassnames()}\n          onBlur={() => this.setState({ isCompanyFocused: false })}\n          onFocus={() => this.setState({ isCompanyFocused: true })}\n        >\n          <label className=\"input-text-label\" htmlFor=\"company\">\n            Company\n          </label>\n          <input type=\"text\" id=\"company\" />\n        </div>\n        <div className=\"input-select-wrap\">\n          <label className=\"input-select-label\" htmlFor=\"role\">\n            Role\n          </label>\n          <div className=\"input-select\">\n            <select id=\"role\" placeholder=\"Select a role\">\n              <option></option>\n              <option value=\"Developer\">Developer</option>\n              <option value=\"CEO\">CEO</option>\n              <option value=\"Marketer\">Marketer</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import SignUpSuccess from \"./SignUpSuccess.js\";\n\nexport default SignUpSuccess;\n","import React from \"react\";\nimport \"./SignUpSuccess.css\";\n\nexport default class SignUpSuccess extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"SignUpSuccess\">\n        <h2>Success!</h2>\n        <i className=\"sg-icon sg-icon-status-positive is-size-60\"></i>\n        <p className=\"SignUpSuccess-description\">\n          Click submit to create your account or use the Back button to review\n          your info.\n        </p>\n      </div>\n    );\n  }\n}\n","import SignUpAuth from \"./SignUpAuth.js\";\n\nexport default SignUpAuth;\n","import React from \"react\";\nimport \"./SignUpAuth.css\";\n\nexport default class SignUpAuth extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"SignUpAuth\">\n        <div className=\"input-select-wrap is-required\">\n          <label className=\"input-select-label\" htmlFor=\"project-status\">\n            What best describes your current authentication solution?\n          </label>\n          <div className=\"input-select\">\n            <select id=\"project-status\">\n              <option></option>\n              <option value=\"New\">I need to build one.</option>\n              <option value=\"WIP\">\n                I've built an existing flow I'm looking to upgrade.\n              </option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"input-select-wrap\">\n          <label\n            className=\"input-select-label is-required\"\n            htmlFor=\"interaction\"\n          >\n            How can users interact with your application?\n          </label>\n          <div className=\"input-select\">\n            <select id=\"interaction\">\n              <option></option>\n              <option value=\"Mobile\">Mobile application only</option>\n              <option value=\"Web\">Website only</option>\n              <option value=\"Both\">Marketer</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"input-select-wrap is-required\">\n          <label className=\"input-select-label\" htmlFor=\"data\">\n            What type of user data does your application contain?\n          </label>\n          <div className=\"input-select\">\n            <select id=\"data\">\n              <option></option>\n              <option value=\"Basic\">Basic profile data</option>\n              <option value=\"Health\">Personal health data</option>\n              <option value=\"Finance\">Financial data</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./SignUpModal.css\";\nimport SignUpProgress from \"../SignUpProgress\";\nimport SignUpLogin from \"../SignUpLogIn\";\nimport SignUpJob from \"../SignUpJob\";\nimport SignUpSuccess from \"../SignUpSuccess\";\nimport SignUpAuth from \"../SignUpAuth\";\n\nexport const Stages = {\n  LOG_IN: \"log-in\",\n  JOB: \"JOB\",\n  AUTH: \"auth\",\n  SUCCESS: \"success\",\n};\n\nexport default class SignUpModal extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { currentStage: Stages.LOG_IN, completedStages: [] };\n    this.setCurrentStage = this.setCurrentStage.bind(this);\n    this.completeStage = this.completeStage.bind(this);\n    this.goToPreviousStage = this.goToPreviousStage.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  getMaskClassnames() {\n    return classnames({\n      \"modal-mask\": true,\n      \"is-visible\": this.props.isSignUpModalOpen,\n    });\n  }\n  getModalClassnames() {\n    return classnames({\n      \"center-modal\": true,\n      \"is-visible\": this.props.isSignUpModalOpen,\n    });\n  }\n\n  setCurrentStage(currentStage) {\n    this.setState({ currentStage });\n  }\n\n  addCompletedStage() {\n    this.setState((prevState) => ({\n      completedStages: [...prevState.completedStages, prevState.currentStage],\n    }));\n  }\n\n  completeStage() {\n    this.addCompletedStage();\n    let values = Object.values(Stages);\n    let nextIndex = values.indexOf(this.state.currentStage) + 1;\n    let nextItem = values[nextIndex];\n    this.setCurrentStage(nextItem);\n  }\n\n  goToPreviousStage() {\n    let values = Object.values(Stages);\n    let prevIndex = values.indexOf(this.state.currentStage) - 1;\n    let prevItem = values[prevIndex];\n    this.setCurrentStage(prevItem);\n  }\n\n  getInputForm() {\n    switch (this.state.currentStage) {\n      case Stages.LOG_IN:\n      default:\n        return <SignUpLogin />;\n      case Stages.JOB:\n        return <SignUpJob updateName={this.props.updateName} />;\n      case Stages.AUTH:\n        return <SignUpAuth />;\n      case Stages.SUCCESS:\n        return <SignUpSuccess />;\n    }\n  }\n\n  getBackButtonClassnames() {\n    return classnames({\n      btn: true,\n      \"btn-secondary\": true,\n      \"is-disabled\": this.state.currentStage === Stages.LOG_IN,\n    });\n  }\n\n  onSubmit() {\n    this.props.updateIsLoggedIn(true);\n    this.props.onClose();\n  }\n\n  render() {\n    return (\n      <>\n        <div className={this.getModalClassnames()}>\n          <i className=\"sg-icon sg-icon-x\" onClick={this.props.onClose}></i>\n          <h2>Create your account</h2>\n          <SignUpProgress\n            currentStage={this.state.currentStage}\n            setCurrentStage={this.setCurrentStage}\n            completedStages={this.state.completedStages}\n          />\n          <div className=\"SignUpModal-form\">{this.getInputForm()}</div>\n          <div className=\"conf-alert-actions\">\n            <div className=\"btn-list\">\n              <button\n                className={this.getBackButtonClassnames()}\n                disabled={this.state.currentStage === Stages.LOG_IN}\n                onClick={this.goToPreviousStage}\n              >\n                Back\n              </button>\n              {this.state.currentStage === Stages.SUCCESS ? (\n                <button className=\"btn btn-primary\" onClick={this.onSubmit}>\n                  Submit\n                </button>\n              ) : (\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={this.completeStage}\n                >\n                  Next\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n        <div\n          className={this.getMaskClassnames()}\n          onClick={this.props.onClose}\n        ></div>\n      </>\n    );\n  }\n}\n","import SignUpModal from \"./SignUpModal.js\";\n\nexport default SignUpModal;\n","import LoggedOutDashboard from \"./LoggedOutDashboard.js\";\n\nexport default LoggedOutDashboard;\n","import React from \"react\";\nimport \"./LoggedOutDashboard.css\";\n\nexport default class LoggedOutDashboard extends React.PureComponent {\n  render() {\n    return <div className=\"LoggedOutDashboard\"></div>;\n  }\n}\n","import DashboardTab from \"./DashboardTab.js\";\n\nexport default DashboardTab;\n","import React from \"react\";\nimport \"./DashboardTab.css\";\nimport { DASHBOARD_NAV_ITEMS } from \"../Dashboard/Dashboard\";\n\nexport default class DashboardTab extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldShowUpsell: true,\n      clientId: \"client-d482cc2e-a93b-11ea-bb37-0242ac130002\",\n      clientIdTooltip: \"Click to copy to clipboard.\",\n      secretKeyTooltip: \"Click to copy to clipboard.\",\n      secretKey: \"abc123456\",\n    };\n    this.onClickCopyClientId = this.onClickCopyClientId.bind(this);\n    this.onClickGetStarted = this.onClickGetStarted.bind(this);\n    this.onCloseUpsell = this.onCloseUpsell.bind(this);\n    this.onMouseEnter = this.onMouseEnter.bind(this);\n    this.onClickCopySecretKey = this.onClickCopySecretKey.bind(this);\n  }\n\n  onClickCopyClientId() {\n    navigator.clipboard.writeText(this.state.clientId);\n    this.setState({\n      clientIdTooltip: \"Copied!\",\n    });\n  }\n\n  onClickCopySecretKey() {\n    navigator.clipboard.writeText(this.state.secretKey);\n    this.setState({\n      secretKeyTooltip: \"Copied!\",\n    });\n  }\n\n  onMouseEnter() {\n    this.setState({\n      clientIdTooltip: \"Click to copy to clipboard.\",\n      secretKeyTooltip: \"Click to copy to clipboard.\",\n    });\n  }\n\n  getFirstName() {\n    return this.props.name.split(\" \")[0];\n  }\n\n  onClickGetStarted() {\n    this.props.updateActiveItem(DASHBOARD_NAV_ITEMS.SINGLE_FACTOR);\n    this.props.handleOpenSetUpGroup();\n  }\n\n  onCloseUpsell() {\n    this.setState({\n      shouldShowUpsell: false,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"DashboardTab\">\n        <h1>{`Welcome back, ${this.getFirstName()}!`}</h1>\n        {this.state.shouldShowUpsell && (\n          <div className=\"card is-upsell\">\n            <i\n              className=\"DashboardTab-dismissUpsell sg-icon sg-icon-x\"\n              onClick={this.onCloseUpsell}\n            ></i>\n            <h3>\n              Based on your needs, we suggest getting started with Single Factor\n              Auth\n            </h3>\n            <p>\n              For single factor authentication flows, you'll rely on either or\n              both one time passcode and email magic link. If your app skews\n              heavily mobile, we suggest one time passcode. If it's heavily web\n              based, we suggest email magic link.\n            </p>\n            <div className=\"btn-list\">\n              <button\n                className=\"btn btn-primary btn-small\"\n                onClick={this.onClickGetStarted}\n              >\n                Get started\n              </button>\n            </div>\n          </div>\n        )}\n        <div className=\"DashboardTab-card card\">\n          <h2>Reports overview</h2>\n          <h4>Request Volume</h4>\n          <div className=\"DashboardTab-reportGroup\">\n            <div className=\"DashboardTab-report\">\n              <div className=\"DashboardTab-lineGraph\"></div>\n              <div className=\"DashboardTab-reportTitle\">One time passcode</div>\n            </div>\n            <div className=\"DashboardTab-report\">\n              <div className=\"DashboardTab-lineGraph\"></div>\n              <div className=\"DashboardTab-reportTitle\">Magic link</div>\n            </div>\n            <div className=\"DashboardTab-report\">\n              <div className=\"DashboardTab-lineGraph\"></div>\n              <div className=\"DashboardTab-reportTitle\">PIN</div>\n            </div>\n          </div>\n          <h4>Percent successful</h4>\n          <div className=\"DashboardTab-reportGroup\">\n            <div className=\"DashboardTab-report\">\n              <div className=\"DashboardTab-lineGraph\"></div>\n              <div className=\"DashboardTab-reportTitle\">One time passcode</div>\n            </div>\n            <div className=\"DashboardTab-report\">\n              <div className=\"DashboardTab-lineGraph\"></div>\n              <div className=\"DashboardTab-reportTitle\">Magic link</div>\n            </div>\n            <div className=\"DashboardTab-report\">\n              <div className=\"DashboardTab-lineGraph\"></div>\n              <div className=\"DashboardTab-reportTitle\">PIN</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"DashboardTab-card card\">\n          <h2>Account details</h2>\n          <div className=\"input-text-wrap is-focused\">\n            <label className=\"input-text-label\" htmlFor=\"client-id\">\n              Client ID\n            </label>\n            <input\n              type=\"text\"\n              disabled\n              id=\"client-id\"\n              value={this.state.clientId}\n            />\n            <div\n              className=\"input-info-tooltip\"\n              onClick={this.onClickCopyClientId}\n              onMouseEnter={this.onMouseEnter}\n            >\n              <span\n                data-tooltip={this.state.clientIdTooltip}\n                data-tooltip-pos=\"right\"\n                data-tooltip-length=\"medium\"\n              >\n                <i\n                  className=\"sg-icon sg-icon-copy input-info-icon\"\n                  id=\"client-id-copy\"\n                ></i>\n              </span>\n            </div>\n          </div>\n          <div className=\"input-text-wrap is-focused\">\n            <label className=\"input-text-label\" htmlFor=\"secret-key\">\n              Secret key\n            </label>\n            <input\n              type=\"password\"\n              disabled\n              id=\"secret-key\"\n              value={this.state.secretKey}\n            />\n            <div\n              className=\"input-info-tooltip\"\n              onClick={this.onClickCopySecretKey}\n              onMouseEnter={this.onMouseEnter}\n            >\n              <span\n                data-tooltip={this.state.secretKeyTooltip}\n                data-tooltip-pos=\"right\"\n                data-tooltip-length=\"medium\"\n              >\n                <i\n                  className=\"sg-icon sg-icon-copy input-info-icon\"\n                  id=\"secret-key-copy\"\n                ></i>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import SingleFactorGuide from \"./SingleFactorGuide.js\";\n\nexport default SingleFactorGuide;\n","import React from \"react\";\n\nexport default class SingleFactorGuide extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"SingleFactorGuide\">\n        <h1>Single Factor Guide</h1>\n      </div>\n    );\n  }\n}\n","import MultiFactorGuide from \"./MultiFactorGuide.js\";\n\nexport default MultiFactorGuide;\n","import React from \"react\";\n\nexport default class MultiFactorGuide extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"MultiFactorGuide\">\n        <h1>Multi Factor Guide</h1>\n      </div>\n    );\n  }\n}\n","import Reports from \"./Reports.js\";\n\nexport default Reports;\n","import React from \"react\";\n\nexport default class Reports extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"Reports\">\n        <h1>Reports</h1>\n      </div>\n    );\n  }\n}\n","import Settings from \"./Settings.js\";\n\nexport default Settings;\n","import React from \"react\";\n\nexport default class Settings extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"Settings\">\n        <h1>Settings</h1>\n      </div>\n    );\n  }\n}\n","import DashboardContent from \"./DashboardContent.js\";\n\nexport default DashboardContent;\n","import React from \"react\";\nimport \"./DashboardContent.css\";\nimport { DASHBOARD_NAV_ITEMS } from \"../Dashboard/Dashboard\";\nimport DashboardTab from \"../DashboardTab\";\nimport SingleFactorGuide from \"../SingleFactorGuide\";\nimport MultiFactorGuide from \"../MultiFactorGuide\";\nimport Reports from \"../Reports\";\nimport Settings from \"../Settings\";\n\nexport default class DashboardContent extends React.PureComponent {\n  getContentComponent() {\n    switch (this.props.activeItem) {\n      case DASHBOARD_NAV_ITEMS.DASHBOARD:\n      default:\n        return (\n          <DashboardTab\n            name={this.props.name}\n            handleOpenSetUpGroup={this.props.handleOpenSetUpGroup}\n            updateActiveItem={this.props.updateActiveItem}\n          />\n        );\n      case DASHBOARD_NAV_ITEMS.SINGLE_FACTOR:\n        return <SingleFactorGuide />;\n      case DASHBOARD_NAV_ITEMS.MULTI_FACTOR:\n        return <MultiFactorGuide />;\n      case DASHBOARD_NAV_ITEMS.REPORTS:\n        return <Reports />;\n      case DASHBOARD_NAV_ITEMS.SETTINGS:\n        return <Settings />;\n    }\n  }\n  render() {\n    return <div className=\"DashboardContent\">{this.getContentComponent()}</div>;\n  }\n}\n","import React from \"react\";\nimport \"./Dashboard.css\";\nimport DashboardNavigation from \"../DashboardNavigation\";\nimport Navigation from \"../Navigation\";\nimport SignUpModal from \"../SignUpModal\";\nimport LoggedOutDashboard from \"../LoggedOutDashboard\";\nimport DashboardContent from \"../DashboardContent\";\n\nexport const DASHBOARD_NAV_ITEMS = {\n  DASHBOARD: \"Dashboard\",\n  SINGLE_FACTOR: \"SingleFactor\",\n  MULTI_FACTOR: \"MultiFactor\",\n  REPORTS: \"Reports\",\n  SETTINGS: \"Settings\",\n};\n\nexport default class Dashboard extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: DASHBOARD_NAV_ITEMS.DASHBOARD,\n      name: \"\",\n      isLoggedIn: false,\n      isSetUpGroupOpen: false,\n      isSignUpModalOpen: false,\n    };\n    this.handleCloseSignUpModal = this.handleCloseSignUpModal.bind(this);\n    this.handleOpenSignUpModal = this.handleOpenSignUpModal.bind(this);\n    this.handleOpenSetUpGroup = this.handleOpenSetUpGroup.bind(this);\n    this.updateIsLoggedIn = this.updateIsLoggedIn.bind(this);\n    this.updateName = this.updateName.bind(this);\n    this.updateActiveItem = this.updateActiveItem.bind(this);\n  }\n\n  handleOpenSignUpModal() {\n    document.body.classList.add(\"modal-open\");\n    this.setState({\n      isSignUpModalOpen: true,\n    });\n  }\n\n  handleCloseSignUpModal() {\n    document.body.classList.remove(\"modal-open\");\n    this.setState({\n      isSignUpModalOpen: false,\n    });\n  }\n\n  handleOpenSetUpGroup() {\n    this.setState((prevState) => ({\n      isSetUpGroupOpen: !prevState.isSetUpGroupOpen,\n    }));\n  }\n\n  updateIsLoggedIn(isLoggedIn) {\n    this.setState({\n      isLoggedIn,\n    });\n  }\n\n  updateName(name) {\n    this.setState({\n      name,\n    });\n  }\n\n  updateActiveItem(item) {\n    this.setState({\n      activeItem: item,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Navigation\n          isLoggedIn={this.state.isLoggedIn}\n          name={this.state.name}\n          handleOpenSignUpModal={this.handleOpenSignUpModal}\n          updateIsLoggedIn={this.updateIsLoggedIn}\n        />\n        {this.state.isLoggedIn ? (\n          <div className=\"Dashboard-content\">\n            <DashboardNavigation\n              activeItem={this.state.activeItem}\n              isSetUpGroupOpen={this.state.isSetUpGroupOpen}\n              handleOpenSetUpGroup={this.handleOpenSetUpGroup}\n              updateActiveItem={this.updateActiveItem}\n            />\n            <DashboardContent\n              activeItem={this.state.activeItem}\n              handleOpenSetUpGroup={this.handleOpenSetUpGroup}\n              name={this.state.name}\n              updateActiveItem={this.updateActiveItem}\n            />\n          </div>\n        ) : (\n          <LoggedOutDashboard />\n        )}\n        <SignUpModal\n          isSignUpModalOpen={this.state.isSignUpModalOpen}\n          onClose={this.handleCloseSignUpModal}\n          updateIsLoggedIn={this.updateIsLoggedIn}\n          updateName={this.updateName}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}